#!/bin/sh -e
#
# udak - small implementation of Debian Archive Kit
#
# Copyright (C) 2009 Mikhail Gusarov <dottedmag@dottedmag.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# Adds contents of given .changes files to the repository.
#
# Passed .changes file need to be pre-tested for:
#  - developer's signature
#  - suite
#

while true; do
    case "$1" in
        --config-file=*)
            CONFIG_FILE=${1#--config-file=}
            shift;;
        *)
            break;;
    esac
done

if [ -n $CONFIG_FILE ]; then
    . $CONFIG_FILE
else
    [ -f udak.conf ] && . ./udak.conf 2>/dev/null && PATH=$(pwd):$PATH \
        || . /etc/udak/udak.conf
fi

. udak-functions

changes_field() {
    sed -e '/-----BEGIN PGP SIGNATURE-----/q' < "$2" \
        | grep "^$1: " \
        | cut -d' ' -f2-
}

deb_field() {
    dpkg-deb -f "$2" "$1"
}

deb_source() {
    SOURCE=$(deb_field Source "$1")
    if [ -z "$SOURCE" ]; then
        echo $(deb_field Package "$1")
    else
        echo $SOURCE | cut -d' ' -f1
    fi
}

section_prefix() {
    SECTION=$(deb_field Section "$1")
    if expr "$SECTION" : ".*/" >/dev/null; then
        echo $SECTION | cut -d/ -f1
    fi
}

changes_debs() {
    dcmd "$changefile" | grep '\.deb$'
}

err() {
    TYPE="$1"
    shift
    echo "ERR($TYPE): $@"
}

warn() {
    TYPE="$1"
    shift
    echo "WARN($TYPE): $@"
}

check_distribution() {
    DISTRIBUTION="$1"

    if in_list "$UDAK_DISTRIBUTIONS" "$DISTRIBUTION"; then
        return 0
    fi

    err "Distribution" "$DISTRIBUTION is not in allowed list: $UDAK_DISTRIBUTIONS"
    return 1
}

check_architecture() {
    DISTRIBUTION="$1"
    DEBFILE="$2"

    ARCH=$(deb_field Architecture "$DEBFILE")

    ARCHITECTURES="all "$(suffix_list UDAK_DISTRO_ARCHITECTURES "$DISTRIBUTION")

    if in_list "$ARCHITECTURES" "$ARCH"; then
        return 0
    fi

    err "Architecture" "$ARCH is not in allowed list: $ARCHITECTURES"
}

get_repo_pkg_dir() {
    DISTRIBUTION="$1"
    DEBFILE="$2"

    SOURCE=$(deb_source "$DEBFILE")
    SECTION_PREFIX=$(section_prefix "$DEBFILE")
    POOL_PREFIX=$(pool_prefix "$SOURCE")
    BINARY=$(deb_field Package "$DEBFILE")
    echo "$UDAK_REPO/overrides/$DISTRIBUTION/$SECTION_PREFIX/$POOL_PREFIX/$SOURCE/$BINARY"
}

check_arch_version() {
    DISTRIBUTION="$1"
    DEBFILE="$2"
    VERSION="$3"

    REPO_PKG_DIR=$(get_repo_pkg_dir "$DISTRIBUTION" "$DEBFILE")
    ARCH=$(deb_field Architecture "$DEBFILE")
    REPO_PKG_FILE="$REPO_PKG_DIR/$ARCH"

    ALL_ARCHS=$(cd "$REPO_PKG_DIR" 2>/dev/null && echo * || :)

    # Keep only archs with current version
    unset ARCHS
    for arch in $ALL_ARCHS; do
        if [ $arch = section ]; then
            continue
        fi
        if dpkg --compare-versions "$VERSION" eq $(cat "$REPO_PKG_DIR/$arch"); then
            ARCHS="$arch $ARCHS"
        fi
    done

    # Check whether there is incompatible package: arch + noarch
    if [ $ARCH = all ] && [ -n "$ARCHS" ] && [ "$ARCHS" != "all " ]; then
        err Architecture "Arch: all is incompatible with other archs ($ARCHS)"
        return 1
    fi

    if [ $ARCH != all ] && in_list "$CURRENT_ARCHS" all; then
        err Architecture "Arch: $ARCH is incompatible with Arch: all package"
        return 1
    fi

    if [ ! -f "$REPO_PKG_FILE" ]; then
        HAVE_NON_SKIPPED_DEBS=1
        return 0
    fi

    if dpkg --compare-versions "$VERSION" gt $(cat "$REPO_PKG_FILE"); then
        HAVE_NON_SKIPPED_DEBS=1
        return 0
    fi

    if dpkg --compare-versions "$VERSION" eq $(cat "$REPO_PKG_FILE"); then
        warn "Version" "$VERSION = "$(cat "$REPO_PKG_FILE")" -- skipping"
        SKIPLIST="$SKIPLIST $DEBFILE"
        return 0
    else
        HAVE_NON_SKIPPED_DEBS=1
        return 0
    fi

    err "Version" "$VERSION <= "$(cat "$REPO_PKG_FILE")
    return 1
}

check_section() {
    DISTRIBUTION="$1"
    DEBFILE="$2"

    SECTION=$(deb_field Section "$DEBFILE")
    SECTIONS=$(suffix_list UDAK_DISTRO_SECTIONS "$DISTRIBUTION")
    if in_list "$SECTIONS" "$SECTION"; then
        return 0
    fi

    err "Section" "$SECTION is not in allowed list: $SECTIONS"
    return 1
}

install_deb() {
    DISTRIBUTION="$1"
    DEBFILE="$2"
    SOURCE=$(deb_source "$DEBFILE")
    BINARY=$(deb_field Package "$DEBFILE")
    VERSION=$(deb_field Version "$DEBFILE")
    SECTION=$(deb_field Section "$DEBFILE")

    REPO_PKG_DIR=$(get_repo_pkg_dir "$DISTRIBUTION" "$DEBFILE")
    ARCH=$(deb_field Architecture "$DEBFILE")

    mkdir -p "$REPO_PKG_DIR"
    deb_field Version "$DEBFILE" > "$REPO_PKG_DIR/$ARCH"
    echo $SECTION > "$REPO_PKG_DIR/section"

    POOL_DIR="$UDAK_REPO/pool/$SECTION/"$(pool_prefix "$SOURCE")"/$SOURCE"
    mkdir -p "$POOL_DIR"

    cp "$DEBFILE" "$POOL_DIR"
}

convert() {
    dpkg-cross -A -a "$2" -b "$1" | awk '/Building / { print $2 }'
}

install_package() {
    DISTRIBUTION="$1"
    DEB_FILE="$2"

    SECTION=$(deb_field Section "$DEB_FILE")
    ARCH=$(deb_field Architecture "$DEB_FILE")

    if ! in_list "$CROSS_ONLY_SECTIONS" "$SECTION"; then
        install_deb "$@"
    fi

    if in_list "$NO_CROSS_SECTIONS" "$SECTION"; then
        return 0
    fi

    ARCHITECTURES=$(suffix_list UDAK_DISTRO_ARCHITECTURES "$DISTRIBUTION")

    if [ $ARCH = all ]; then
        for arch in $ARCHITECTURES; do
            C_DEBFILE=$(convert "$DEB_FILE" "$arch")
            install_deb "$DISTRIBUTION" "$C_DEBFILE"
            rm -f "$C_DEBFILE"
        done
    else
        C_DEBFILE=$(convert "$DEB_FILE" "$ARCH")
        install_deb "$DISTRIBUTION" "$C_DEBFILE"
        rm -f "$C_DEBFILE"
    fi
}

STOP=0

for changefile in "$@"; do
    DISTRIBUTION=$(changes_field Distribution "$changefile")
    VERSION=$(changes_field Version "$changefile")

    echo "->" $(basename $changefile)

    if ! check_distribution "$DISTRIBUTION"; then
        STOP=1
    fi

    for debfile in $(changes_debs "$changefile"); do

        echo "  " $(basename $debfile) " -> $DISTRIBUTION"

        if ! check_architecture "$DISTRIBUTION" "$debfile"; then
            STOP=1
        fi

        if ! check_arch_version "$DISTRIBUTION" "$debfile" "$VERSION"; then
            STOP=1
        fi

        if ! check_section "$DISTRIBUTION" "$debfile"; then
            STOP=1
        fi
    done
done

if [ -z $HAVE_NON_SKIPPED_DEBS ]; then
    echo "ERR(Version): all packages in upload already present in repository."
    STOP=1
fi

if [ x$STOP = 'x1' ]; then
    echo "STOP: rejecting upload due to problems."
    exit 1
fi

for changefile in "$@"; do
    DISTRIBUTION=$(changes_field Distribution "$changefile")
    for debfile in $(changes_debs "$changefile"); do
        if ! in_list "$SKIPLIST" "$debfile"; then
            install_package "$DISTRIBUTION" "$debfile"
        fi
    done
done
